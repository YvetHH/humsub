nrep=2000, burn.in=100,
save.chain=TRUE)
mcmcChain(RT.enhanced, "Ychange")
clusterPlot(RT.enhanced)
RT.enhanced.clustered <- CreateSeuratObject(counts=logcounts(RT.enhanced),
assay='Spatial',
meta.data=as.data.frame(colData(RT.enhanced)))
RT.enhanced.clustered <- CreateSeuratObject(counts=logcounts(RT.enhanced),assay='Spatial',meta.data=as.data.frame(colData(RT.enhanced)))
RT.enhanced
#saveRDS(se, file = "~/switchdrive/spatial_transcriptomics/snrnaseq/annotated_integrated_sn.R")
se@meta.data
markers <- list()
markers[["Adipocyte"]] <- c("Adipoq")
markers[["ASPC"]] <- c("Pdgfra")
markers[["Mesothelium"]] <- c("Msln")
markers[["Endothelial"]] <- c("Jam2")
markers[["Lymphatic endo"]] <- c("Prox1")
markers[["Pericyte"]] <- c("Steap4")
markers[["Smooth muscle"]] <- c("Myocd")
markers[["Macrophage"]] <- c("Mafb")
markers[["Monocyte"]] <- c("Cybb")
markers[["Dendritic cell"]] <- c("Flt3")
markers[["Mast cell"]] <- c("Cpa3")
markers[["Neutrophil"]] <- c("Csf3r")
markers[["B cell"]] <- c("Ms4a1")
markers[["NK cell"]] <- c("Klrd1")
markers[["T cell"]] <- c("Il7r")
markers[["Male epithel"]] <- c("Dcdc2a")
markers[["Female epithel"]] <- c("Erbb4")
scc.enhanced <- enhanceFeatures(RT.enhanced, RT_sce,
model="xgboost",
feature_names=purrr::reduce(markers, c),
nrounds=0)
sum_counts <- function(RT_sce, features) {
if (length(features) > 1) {
colSums(logcounts(sce)[features, ])
} else {
logcounts(RT_sce)[features, ]
}
}
spot_expr <- purrr::map(markers, function(xs) sum_counts(RT_sce, xs))
featurePlot(scc.enhanced, markers)
markers <- list()
markers[["Adipocyte"]] <- c("Adipoq")
markers[["ASPC"]] <- c("Pdgfra")
markers[["Mesothelium"]] <- c("Msln")
markers[["Endothelial"]] <- c("Jam2")
markers[["Lymphatic endo"]] <- c("Prox1")
markers[["Pericyte"]] <- c("Steap4")
markers[["Smooth muscle"]] <- c("Myocd")
markers[["Macrophage"]] <- c("Mafb")
markers[["Monocyte"]] <- c("Cybb")
markers[["Dendritic cell"]] <- c("Flt3")
markers[["Mast cell"]] <- c("Cpa3")
markers[["Neutrophil"]] <- c("Csf3r")
markers[["B cell"]] <- c("Ms4a1")
markers[["NK cell"]] <- c("Klrd1")
markers[["T cell"]] <- c("Il7r")
markers[["Male epithel"]] <- c("Dcdc2a")
markers[["Female epithel"]] <- c("Erbb4")
featurePlot(scc.enhanced, markers)
featurePlot(scc.enhanced, 'Adipoq')
featurePlot(scc.enhanced, 'Pdgfra')
featurePlot(scc.enhanced, 'Msln')
featurePlot(scc.enhanced, 'Jam2')
featurePlot(scc.enhanced, 'Prox1')
featurePlot(scc.enhanced, 'Steap4')
featurePlot(scc.enhanced, 'Myocd')
featurePlot(scc.enhanced, 'Mafb')
featurePlot(scc.enhanced, 'Cybb')
featurePlot(scc.enhanced, 'Flt3')
featurePlot(scc.enhanced, 'Cpa3')
featurePlot(scc.enhanced, 'Scf3r')
featurePlot(scc.enhanced, 'Csf3r')
featurePlot(scc.enhanced, 'Ms4a1')
featurePlot(scc.enhanced, 'Klrd1')
featurePlot(scc.enhanced, 'Dcdc2a')
featurePlot(scc.enhanced, 'Erbb4')
featurePlot(scc.enhanced, 'ERBB4')
RT.enhanced.clustered
RT.enhanced.clustered <- CreateSeuratObject(counts=logcounts(RT.enhanced),assay='Spatial',meta.data=as.data.frame(colData(RT.enhanced)))
featurePlot(scc.enhanced, 'ERBB4')
library(Seurat)
library(ggplot2)
library(patchwork)
library(dplyr)
library(tidyverse)
RT <- Load10X_Spatial(data.dir = "~/switchdrive/spatial_transcriptomics/new_run/seurat_input/RT/",slice = "RT")
Cold <- Load10X_Spatial(data.dir = "~/switchdrive/spatial_transcriptomics/new_run/seurat_input/Cold/",slice = "Cold")
Abx <- Load10X_Spatial(data.dir = "~/switchdrive/spatial_transcriptomics/new_run/seurat_input/Abx/",slice = "Abx")
Cax <- Load10X_Spatial(data.dir = "~/switchdrive/spatial_transcriptomics/new_run/seurat_input/Cax/",slice = "Cax")
VlnPlot(RT, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
VlnPlot(Cold, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
VlnPlot(Abx, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
VlnPlot(Cax, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
RT[["percent.mt"]] <- PercentageFeatureSet(RT, pattern = "^MT-")
VlnPlot(RT, features = "percent.mt", pt.size = 0.1) + NoLegend()
RT[["percent.mt"]] <- PercentageFeatureSet(RT, pattern = "MT-")
VlnPlot(RT, features = "percent.mt", pt.size = 0.1) + NoLegend()
RT[["percent.mt"]] <- PercentageFeatureSet(RT, pattern = "mt-")
VlnPlot(RT, features = "percent.mt", pt.size = 0.1) + NoLegend()
RT[["percent.mt"]] <- PercentageFeatureSet(RT, pattern = "MT")
VlnPlot(RT, features = "percent.mt", pt.size = 0.1) + NoLegend()
VlnPlot(RT, features = "percent.mt", pt.size = 0.1) + NoLegend()
RT
RT$percent.mt
RT <- subset(RT, subset = nCount_Spatial > 500 & nCount_Spatial < 6000)
RT[["percent.mt"]] <- PercentageFeatureSet(RT, pattern = "mt")
VlnPlot(RT, features = "percent.mt", pt.size = 0.1) + NoLegend()
RT[["percent.mt"]] <- PercentageFeatureSet(RT, pattern = "^mt")
VlnPlot(RT, features = "percent.mt", pt.size = 0.1) + NoLegend()
Cold[["percent.mt"]] <- PercentageFeatureSet(Cold, pattern = "^mt")
VlnPlot(Cold, features = "percent.mt", pt.size = 0.1) + NoLegend()
Abx[["percent.mt"]] <- PercentageFeatureSet(Abx, pattern = "^mt")
Cax[["percent.mt"]] <- PercentageFeatureSet(Cax, pattern = "^mt")
VlnPlot(Cold, features = "percent.mt", pt.size = 0.1) + NoLegend()
VlnPlot(Abx, features = "percent.mt", pt.size = 0.1) + NoLegend()
VlnPlot(Cax, features = "percent.mt", pt.size = 0.1) + NoLegend()
RT[["percent.mt"]] <- PercentageFeatureSet(RT, pattern = "mt")
Cold[["percent.mt"]] <- PercentageFeatureSet(Cold, pattern = "mt")
Abx[["percent.mt"]] <- PercentageFeatureSet(Abx, pattern = "mt")
Cax[["percent.mt"]] <- PercentageFeatureSet(Cax, pattern = "mt")
VlnPlot(Cax, features = "percent.mt", pt.size = 0.1) + NoLegend()
VlnPlot(Cold, features = "percent.mt", pt.size = 0.1) + NoLegend()
VlnPlot(Abx, features = "percent.mt", pt.size = 0.1) + NoLegend()
RT[["percent.mt"]] <- PercentageFeatureSet(RT, pattern = "mt-")
VlnPlot(RT, features = "percent.mt", pt.size = 0.1) + NoLegend()
Cold[["percent.mt"]] <- PercentageFeatureSet(Cold, pattern = "mt-")
Abx[["percent.mt"]] <- PercentageFeatureSet(Abx, pattern = "mt-")
Cax[["percent.mt"]] <- PercentageFeatureSet(Cax, pattern = "mt-")
VlnPlot(RT, features = "percent.mt", pt.size = 0.1) + NoLegend()
RT[["percent.mt"]] <- PercentageFeatureSet(RT, pattern = "MT-")
VlnPlot(RT, features = "percent.mt", pt.size = 0.1) + NoLegend()
RT[["percent.mt"]] <- PercentageFeatureSet(RT, pattern = "mt")
VlnPlot(RT, features = "percent.mt", pt.size = 0.1) + NoLegend()
Cold[["percent.mt"]] <- PercentageFeatureSet(Cold, pattern = "mt")
VlnPlot(Cold, features = "percent.mt", pt.size = 0.1) + NoLegend()
RT <- Load10X_Spatial(data.dir = "~/switchdrive/spatial_transcriptomics/new_run/seurat_input/RT/",slice = "RT")
Cold <- Load10X_Spatial(data.dir = "~/switchdrive/spatial_transcriptomics/new_run/seurat_input/Cold/",slice = "Cold")
Abx <- Load10X_Spatial(data.dir = "~/switchdrive/spatial_transcriptomics/new_run/seurat_input/Abx/",slice = "Abx")
Cax <- Load10X_Spatial(data.dir = "~/switchdrive/spatial_transcriptomics/new_run/seurat_input/Cax/",slice = "Cax")
VlnPlot(RT, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
VlnPlot(Cold, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
VlnPlot(Abx, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
VlnPlot(Cax, features = "nCount_Spatial", pt.size = 0.1) + NoLegend()
RT <- subset(RT, subset = nCount_Spatial > 500)
Cold <- subset(Cold, subset = nCount_Spatial > 500)
Abx <- subset(Abx, subset = nCount_Spatial > 500)
Cax <- subset(Cax, subset = nCount_Spatial > 500)
RT <- SCTransform(RT, assay = "Spatial", verbose = TRUE)
Cold <- SCTransform(Cold, assay = "Spatial", verbose = TRUE)
Abx <- SCTransform(Abx, assay = "Spatial", verbose = TRUE)
Cax <- SCTransform(Cax, assay = "Spatial", verbose = TRUE)
object.list <- c(RT,Cold,Abx,Cax)
genes <- SelectIntegrationFeatures(object.list = object.list)
merged <- merge(RT, y = c(Cold, Abx, Cax), add.cell.ids = c("RT", "Cold", "Abx","Cax"), project = c("RT", "Cold", "Abx","Cax"),merge.data = TRUE)
merged$orig.ident <- sapply(X = strsplit(colnames(merged), split = "_"), FUN = "[", 1)
merged <- SetIdent(merged, value = merged@meta.data$orig.ident)
SpatialFeaturePlot(merged, features = "Fabp4", alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = "Pdgfra", alpha = c(0.1, 1)) + ggtitle("Pdgfra")
merged <- RunPCA(merged, assay = "SCT",features = genes)
ElbowPlot(merged,ndims = 50)
merged <- FindNeighbors(merged, reduction = "pca", dims = 1:30)
merged <- FindClusters(merged, resolution = 0.8)
merged <- RunUMAP(merged, reduction = "pca", dims = 1:30)
DimPlot(merged, reduction = "umap", label = TRUE,split.by = 'orig.ident')
DimPlot(merged, reduction = "umap", label = FALSE)
SpatialDimPlot(merged,label=TRUE,images = "Abx",alpha = 0.5)
SpatialDimPlot(merged,label=TRUE,images = "Cold",alpha = 0.5)
SpatialDimPlot(merged,label=TRUE,images = "Cax",alpha = 0.5)
SpatialDimPlot(merged,label=TRUE,images = "RT",alpha = 0.5)
SpatialFeaturePlot(merged, features = c("Adipoq"), ncol = 3, alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = c("Pdgfra"), ncol = 3, alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = c("Eno1"), ncol = 3, alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = c("ENO1"), ncol = 3, alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = c("Cidea"), ncol = 3, alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = c("Eno1"), ncol = 3, alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = c("Eno1l1"), ncol = 3, alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = c("Mbp1"), ncol = 3, alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = c("Mpb1"), ncol = 3, alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = c("Pph"), ncol = 3, alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = c("ENO1"), ncol = 3, alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = c("Pdgfra"), ncol = 3, alpha = c(0.1, 1))
SpatialFeaturePlot(merged, features = c("ASPC"), pt.size.factor = 1.6, ncol = 2, crop = TRUE,alpha = c(0.1,1))
snrnaseq_reference <- readRDS("devcell_annotated_snrnaseq.rds")
snrnaseq_reference <- readRDS("~/switchdrive/spatial_transcriptomics/snrnaseq/devcell_annotated_snrnaseq.rds")
DimPlot(merged, reduction = "umap", label = TRUE,split.by = 'orig.ident')
DimPlot(merged, reduction = "umap", label = FALSE)
DimPlot(merged, reduction = "umap", label = TRUE,split.by = 'orig.ident')
DimPlot(merged, reduction = "umap", label = TRUE,split.by = 'orig.ident',label.box = TRUE)
SpatialFeaturePlot(merged, features = c("adipocyte"), pt.size.factor = 1.6, ncol = 2, crop = TRUE,alpha = c(0.1,1))
R --version
BiocManager::install("ANCOMBC")
BiocManager::install("ANCOMBC")
BiocManager::install("ANCOMBC")
library(ANCOMBC)
data(atlas1006)
# Subset to baseline
tse = atlas1006[, atlas1006$time == 0]
# Re-code the bmi group
tse$bmi = recode(tse$bmi_group,
obese = "obese",
severeobese = "obese",
morbidobese = "obese")
# Subset to lean, overweight, and obese subjects
tse = tse[, tse$bmi %in% c("lean", "overweight", "obese")]
# Create the region variable
tse$region = recode(as.character(tse$nationality),
Scandinavia = "NE", UKIE = "NE", SouthEurope = "SE",
CentralEurope = "CE", EasternEurope = "EE",
.missing = "unknown")
# Discard "EE" as it contains only 1 subject
# Discard subjects with missing values of region
tse = tse[, ! tse$region %in% c("EE", "unknown")]
print(tse)
list(tse)
res_linear = secom_linear(data = list(tse), assay_name = "counts",
tax_level = "Phylum", pseudo = 0,
prv_cut = 0.5, lib_cut = 1000, corr_cut = 0.5,
wins_quant = c(0.05, 0.95), method = "pearson",
soft = FALSE, thresh_len = 20, n_cv = 10,
thresh_hard = 0.3, max_p = 0.005, n_cl = 2)
res_linear = secom_linear(data = list(tse), assay_name = "counts",
tax_level = "Phylum", pseudo = 0,
prv_cut = 0.5, lib_cut = 1000, corr_cut = 0.5,
wins_quant = c(0.05, 0.95), method = "pearson",
soft = FALSE, thresh_len = 20, n_cv = 10,
thresh_hard = 0.3, max_p = 0.005, n_cl = 2)
data(atlas1006)
# Subset to baseline
tse = atlas1006[, atlas1006$time == 0]
# Re-code the bmi group
tse$bmi = recode(tse$bmi_group,
obese = "obese",
severeobese = "obese",
morbidobese = "obese")
# Subset to lean, overweight, and obese subjects
tse = tse[, tse$bmi %in% c("lean", "overweight", "obese")]
library(ANCOMBC)
data(atlas1006)
# Subset to baseline
tse = atlas1006[, atlas1006$time == 0]
# Re-code the bmi group
tse$bmi = recode(tse$bmi_group,
obese = "obese",
severeobese = "obese",
morbidobese = "obese")
library(ANCOMBC)
data(atlas1006)
# Subset to baseline
tse = atlas1006[, atlas1006$time == 0]
# Re-code the bmi group
tse$bmi = recode(tse$bmi_group,
obese = "obese",
severeobese = "obese",
morbidobese = "obese")
library(tidyverse)
data(atlas1006)
# Subset to baseline
tse = atlas1006[, atlas1006$time == 0]
# Re-code the bmi group
tse$bmi = recode(tse$bmi_group,
obese = "obese",
severeobese = "obese",
morbidobese = "obese")
# Subset to lean, overweight, and obese subjects
tse = tse[, tse$bmi %in% c("lean", "overweight", "obese")]
# Create the region variable
tse$region = recode(as.character(tse$nationality),
Scandinavia = "NE", UKIE = "NE", SouthEurope = "SE",
CentralEurope = "CE", EasternEurope = "EE",
.missing = "unknown")
# Discard "EE" as it contains only 1 subject
# Discard subjects with missing values of region
tse = tse[, ! tse$region %in% c("EE", "unknown")]
print(tse)
res_linear = secom_linear(data = list(tse), assay_name = "counts",
tax_level = "Phylum", pseudo = 0,
prv_cut = 0.5, lib_cut = 1000, corr_cut = 0.5,
wins_quant = c(0.05, 0.95), method = "pearson",
soft = FALSE, thresh_len = 20, n_cv = 10,
thresh_hard = 0.3, max_p = 0.005, n_cl = 2)
res_dist = secom_dist(data = list(tse), assay_name = "counts",
tax_level = "Phylum", pseudo = 0,
prv_cut = 0.5, lib_cut = 1000, corr_cut = 0.5,
wins_quant = c(0.05, 0.95), R = 1000,
thresh_hard = 0.3, max_p = 0.005, n_cl = 2)
corr_linear = res_linear$corr_th
cooccur_linear = res_linear$mat_cooccur
# Filter by co-occurrence
overlap = 10
corr_linear[cooccur_linear < overlap] = 0
df_linear = data.frame(get_upper_tri(corr_linear)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(value = round(value, 2))
tax_name = sort(union(df_linear$var1, df_linear$var2))
df_linear$var1 = factor(df_linear$var1, levels = tax_name)
df_linear$var2 = factor(df_linear$var2, levels = tax_name)
df_linear = data.frame(get_upper_tri(corr_linear)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(value = round(value, 2))
corr_linear = res_linear$corr_th
cooccur_linear = res_linear$mat_cooccur
# Filter by co-occurrence
overlap = 10
corr_linear[cooccur_linear < overlap] = 0
get_upper_tri = function(cormat){
cormat[lower.tri(cormat)] = NA
diag(cormat) = NA
return(cormat)
}
res_linear = secom_linear(data = list(tse), assay_name = "counts",
tax_level = "Phylum", pseudo = 0,
prv_cut = 0.5, lib_cut = 1000, corr_cut = 0.5,
wins_quant = c(0.05, 0.95), method = "pearson",
soft = FALSE, thresh_len = 20, n_cv = 10,
thresh_hard = 0.3, max_p = 0.005, n_cl = 2)
res_dist = secom_dist(data = list(tse), assay_name = "counts",
tax_level = "Phylum", pseudo = 0,
prv_cut = 0.5, lib_cut = 1000, corr_cut = 0.5,
wins_quant = c(0.05, 0.95), R = 1000,
thresh_hard = 0.3, max_p = 0.005, n_cl = 2)
corr_linear = res_linear$corr_th
cooccur_linear = res_linear$mat_cooccur
# Filter by co-occurrence
overlap = 10
corr_linear[cooccur_linear < overlap] = 0
df_linear = data.frame(get_upper_tri(corr_linear)) %>%
rownames_to_column("var1") %>%
pivot_longer(cols = -var1, names_to = "var2", values_to = "value") %>%
filter(!is.na(value)) %>%
mutate(value = round(value, 2))
tax_name = sort(union(df_linear$var1, df_linear$var2))
df_linear$var1 = factor(df_linear$var1, levels = tax_name)
df_linear$var2 = factor(df_linear$var2, levels = tax_name)
heat_linear_th = df_linear %>%
ggplot(aes(var2, var1, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", na.value = "grey",
midpoint = 0, limit = c(-1,1), space = "Lab",
name = NULL) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
geom_text(aes(var2, var1, label = value), color = "black", size = 4) +
labs(x = NULL, y = NULL, title = "Pearson (Thresholding)") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1,
face = "italic"),
axis.text.y = element_text(size = 12, face = "italic"),
strip.text.x = element_text(size = 14),
strip.text.y = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 15),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
legend.position = "none") +
coord_fixed()
heat_linear_th
heat_linear_th = df_linear %>%
ggplot(aes(var2, var1, fill = value)) +
geom_tile(color = "black") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white", na.value = "grey",
midpoint = 0, limit = c(-1,1), space = "Lab",
name = NULL) +
scale_x_discrete(drop = FALSE) +
scale_y_discrete(drop = FALSE) +
geom_text(aes(var2, var1, label = value), color = "black", size = 4) +
labs(x = NULL, y = NULL, title = "Pearson (Thresholding)") +
theme_bw() +
theme(axis.text.x = element_text(angle = 45, vjust = 1, size = 12, hjust = 1,
face = "italic"),
axis.text.y = element_text(size = 12, face = "italic"),
strip.text.x = element_text(size = 14),
strip.text.y = element_text(size = 14),
legend.text = element_text(size = 12),
plot.title = element_text(hjust = 0.5, size = 15),
panel.grid.major = element_blank(),
axis.ticks = element_blank(),
legend.position = "none") +
coord_fixed()
heat_linear_th
res_linear
list(tse)
BiocManager::install("Maaslin2")
library(Maaslin2)
?Maaslin2
BiocManager::install("curatedMetagenomicData")
sampleMetadata
library(dplyr)
library(DT)
sampleMetadata |>
filter(study_name == "AsnicarF_2017") |>
select(where(~ !any(is.na(.x)))) |>
slice(1:10) |>
select(1:10) |>
datatable(options = list(dom = "t"), extensions = "Responsive")
sampleMetadata
sampleMetadata
curatedMetagenomicData("AsnicarF_20.+")
curatedMetagenomicData
BiocManager::install('scater')
setwd("~/switchdrive/deep learning/combined_studies/specific_hashes/effect_size/")
# Load necessary libraries
library(metafor)
library(tidyverse)
library(progress)
# Read the data from files
#relab <- readr::read_tsv('relab_filtered.tsv')
relab <- read_tsv("relab_species.tsv")
metadata <- readr::read_tsv('metadata_filtered.tsv')
# Convert from wide to long format
relab_long <- relab %>%
tidyr::pivot_longer(-sample_id, names_to = "species", values_to = "abundance")
# Merge datasets
df <- merge(relab_long, metadata, by = "sample_id")
# Apply arcsine-square root transformation to species relative abundances
df$abundance <- asin(sqrt(df$abundance))
# Separate into two DataFrames for treatment and control
df_crc <- df[df$study_condition == 'CRC', ]
df_control <- df[df$study_condition == 'control', ]
# Create a progress bar
pb <- progress::progress_bar$new(total = length(unique(df$species)))
# Define an empty DataFrame to store results
df_results <- data.frame()
df_study_results_all <- data.frame()  # Data frame for all study-specific results
# Loop over all species
for (species in unique(df$species)) {
# Filter data for current species
df_crc_species <- df_crc[df_crc$species == species, ]
df_control_species <- df_control[df_control$species == species, ]
# Define an empty DataFrame to store per study effect sizes
df_study_results <- data.frame()
# Loop over all studies
for (study in unique(df_crc_species$study)) {
# Filter data for current study
df_crc_study <- df_crc_species[df_crc_species$study == study, ]
df_control_study <- df_control_species[df_control_species$study == study, ]
# Calculate Cohen's d for the study
effect_size <- escalc(measure="SMD", m1i=mean(df_crc_study$abundance), m2i=mean(df_control_study$abundance), sd1i=sd(df_crc_study$abundance), sd2i=sd(df_control_study$abundance), n1i=nrow(df_crc_study), n2i=nrow(df_control_study))
# Save per study effect sizes
df_study_results <- rbind(df_study_results, data.frame(species = species, study = study, effect_size = effect_size$yi, variance = effect_size$vi))
}
# Append per-study results to df_study_results_all
df_study_results_all <- rbind(df_study_results_all, df_study_results)
# Initialize a flag for RMA success
rma_success <- FALSE
# Use tryCatch to handle errors
result <- tryCatch({
# Perform random-effects meta-analysis
re_model <- rma(yi = df_study_results$effect_size, vi = df_study_results$variance, method = "DL")
# Set the flag to TRUE indicating the success of the rma operation
rma_success <<- TRUE
# Return results
#data.frame(species = species, mean_effect_size = re_model$beta,
#           ci_lower = re_model$ci.lb, ci_upper = re_model$ci.ub,
#           p_value = re_model$pval, Q_statistic = re_model$Qe,
#           Q_pvalue = re_model$QEp)
data.frame(species = species, mean_effect_size = re_model$beta,
ci_lower = re_model$ci.lb, ci_upper = re_model$ci.ub,
p_value = re_model$pval)
}, error = function(e) {
# On error, print the error message
print(paste("Error for species:", species))
print(e)
})
if (!rma_success) {
# If rma failed, append NA values
result <- data.frame(species = species, mean_effect_size = NA, ci_lower = NA, ci_upper = NA, p_value = NA)
}
# Append results to df_results
df_results <- rbind(df_results, result)
# Update the progress bar
pb$tick()
}
# After the loop, adjust p-values for multiple comparisons
df_results$p_value_adj <- p.adjust(df_results$p_value, method = "BH")
# Save the results to a .tsv file
write.table(df_results, "random_effects_results_species.tsv", sep = "\t", row.names = FALSE)
# Save per study results to a .tsv file
write.table(df_study_results_all, "per_study_results_species.tsv", sep = "\t", row.names = FALSE)
comparison_input <- read_tsv("compare_subspecies.tsv")
model <- rma(yi = effect_size, vi = variance, mods = ~ factor(subspecies) - 1, data = comparison_input, method="REML")
summary(model)
comp_matrix <- rbind("1316001001 - 1316001002" = c(1, -1))
contrast_results <- contrast(model, comp_matrix)
# Load necessary libraries
library(metafor)
contrast_results <- contrast(model, comp_matrix)
model <- rma(yi = effect_size, vi = variance, mods = ~ factor(subspecies) - 1, data = comparison_input, method="DL")
summary(model)
comp_matrix <- rbind("1316001001 - 1316001002" = c(1, -1))
contrast_results <- contrast(model, comp_matrix)
REML
model <- rma(yi = effect_size, vi = variance, mods = ~ factor(subspecies) - 1, data = comparison_input, method="REML")
summary(model)
comp_matrix <- rbind("1316001001 - 1316001002" = c(1, -1))
comparison_input <- read_tsv("compare_subspecies.tsv")
model <- rma(yi = effect_size, vi = variance, mods = ~ factor(subspecies) - 1, data = comparison_input, method="REML")
summary(model)
comparison_input <- read_tsv("compare_subspecies.tsv")
model <- rma(yi = effect_size, vi = variance, mods = ~ factor(subspecies) - 1, data = comparison_input, method="REML")
summary(model)
comparison_input <- read_tsv("compare_subspecies.tsv")
model <- rma(yi = effect_size, vi = variance, mods = ~ factor(subspecies) - 1, data = comparison_input, method="REML")
summary(model)
comparison_input <- read_tsv("compare_subspecies.tsv")
model <- rma(yi = effect_size, vi = variance, mods = ~ factor(subspecies) - 1, data = comparison_input, method="REML")
summary(model)
